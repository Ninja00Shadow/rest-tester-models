[comment encoding = UTF-8 /]
[module renders('http://www.example.org/rest_tester')]

[template public render(v : Value)][/template]
[template public render(b : BoolExpr)][/template]
[template public render(s : Statement)][/template]

[template public renderOptions(opts : Collection(Option))]
[for (o : Option | opts) separator(', ')][o.key/]: [o.value.render()/][/for]
[/template]

[comment][template public render(req : Request) overrides]
[if (req.method.oclIsUndefined() or req.endpoint.oclIsUndefined())]
//Incomplete request: missing method or endpoint.
[/if]
[if (req.method.oclIsUndefined() or not Sequence{'GET', 'POST', 'PUT', 'DELETE'}->includes(req.method))]
//Unsupported or missing HTTP method: [req.method/].
[/if]
[req.method.toString()/] "[req.endpoint/]" [if (req.config <> null)]
[req.config.render()/] 
[/if]
[/template][/comment]

[template public render(req : Request) overrides]
	[let missing : Boolean = req.method.oclIsUndefined() or req.endpoint.oclIsUndefined()]
		[let unsupported : Boolean = req.method.oclIsUndefined() or not Sequence{'GET','POST','PUT','DELETE'}->includes(req.method.toString())]
    		[if missing]
// Incomplete request: missing method or endpoint.
    		[/if]
    		[if unsupported]
// Unsupported or missing HTTP method: [if req.method.oclIsUndefined()]null[else][req.method/][/if].
    		[/if]
    		[if not (missing or unsupported)]
[req.method.toString()/] "[req.endpoint/]"[if req.config <> null][req.config.render()/][/if]
			[else]
//	[req.method.toString()/] "[req.endpoint/]"
    		[/if]
		[/let]
	[/let]
[/template]

[template public render(vd : VarDeclaration) overrides]
[if vd.name.oclIsUndefined()]// Missing var name[elseif vd.value.oclIsUndefined()]// Missing value for var "[vd.name/]"[else]var [vd.name/] = [vd.value.render()/][/if]
[/template]

[template public render(vr : VarReassignment) overrides]
[if vr.name.oclIsUndefined()]// Missing var name[elseif vr.value.oclIsUndefined()]// Missing value for var "[vr.name/]"[else][vr.name/] = [vr.value.render()/][/if]
[/template]

[template public render(a : Assertion) overrides]
[let exprStr : String = if a.expr.oclIsUndefined() then '// Missing assert body' else a.expr.render() endif]
[if isComment(exprStr)][exprStr/][else]expect [exprStr/][/if][/let]
[/template]

[template public render(be : BinaryLogicalExpr)]
[if be.left.oclIsUndefined() or be.right.oclIsUndefined()]// Missing left or right part: expect [renderLogOp(be.op)/][elseif be.op.oclIsUndefined()]// Missing operator: expect ([be.left.render()/]) ([be.right.render()/])[else]
([be.left.render()/]) [renderLogOp(be.op)/] ([be.right.render()/])[/if]
[/template]

[template public render(ne : NotExpr)]
[if ne.expr.oclIsUndefined()]
// Missing expression[else]
![ne.expr.render()/][/if]
[/template]

[template public render(ce : ComparisonExpr)]
[if ce.left.oclIsUndefined() or ce.right.oclIsUndefined()]// Missing left or right part: expect [renderCompOp(ce.op)/][elseif ce.op.oclIsUndefined()]// Missing operator: expect [ce.left.render()/] [ce.right.render()/][else]
[ce.left.render()/] [renderCompOp(ce.op)/] [ce.right.render()/][/if]
[/template]

[comment] === Value === [/comment]
[template public render(s : StringValue) overrides]"[s.literal/]"[/template]

[template public render(n : NumberValue) overrides][n.literal/][/template]

[template public render(b : BooleanValue) overrides][if b.literal]true[else]false[/if][/template]

[template public render(o : ObjectValue) overrides]
{
[for (p : Pair | o.entries)]
	[if p.key.oclIsUndefined()]
	// Missing key
	[elseif p.value.oclIsUndefined()]
	// Missing value
	[else]
	"[p.key/]": [p.value.render()/][let idx : Integer = o.entries->indexOf(p)][if idx <> o.entries->size()],[/if][/let]
	[/if]
[/for]
}
[/template]

[template public render(a : ArrayValue) overrides]
[ '[' /][for (e : Value | a.elements) separator(', ')][e.render()/][/for][ ']' /]
[/template]

[template public render(v : VarAccess) overrides]
[v.name/][for (sel : Selector | v.selectors)][sel.render()/][/for]
[/template]

[template public render(sel : Selector)]
['['/][if sel.propertyName <> null]"[sel.propertyName/]"[else][sel.index/][/if][']' /]
[/template]

[query public renderCompOp(op : ComparisonOp) : String =
	if self = ComparisonOp::EQ  then '==' 
	else if self = ComparisonOp::NEQ then '!=' 
	else if self = ComparisonOp::LT  then '<' 
	else if self = ComparisonOp::GT  then '>' 
	else if self = ComparisonOp::LTE then '<=' 
	else '>=' endif endif endif endif endif
/]

[query public renderLogOp(op : LogicalOp) : String =
	if self = LogicalOp::AND then '&&' else '||' endif
/]

[query public isComment(str : String) : Boolean =
    str.startsWith('//')
/]