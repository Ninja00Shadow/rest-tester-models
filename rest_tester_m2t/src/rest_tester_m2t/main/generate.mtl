[comment encoding = UTF-8 /]
[module generate('http://www.example.org/rest_tester')]
[import rest_tester_m2t::main::renders /]
[template public genRestTesterModel2RestTesterCode(aProgram : Program)]
[comment @main/]
[file (aProgram.name + '.rt', false, 'UTF-8')]
[comment] ----- ENV ----- [/comment]
[for (env : EnvDeclaration | aProgram.envDeclarations)]
	[if ((env.name.oclIsUndefined() or env.name.trim() = '') and (env.value.oclIsUndefined() or env.value.toString().trim() = ''))]
//Missing name and value while declaring ENV.
	[elseif (env.name.oclIsUndefined() or env.name.trim() = '')]
//Missing name while declaring ENV.
	[elseif (env.value.oclIsUndefined())]
//Missing value while declaring ENV.
	[else]
		[if (aProgram.envDeclarations->select(e | not (e.name.oclIsUndefined() or e.name.trim() = '') and e.name = env.name)->size() > 1)]
//Duplicate ENV declaration: [env.name/].
		[/if]
ENV [env.name/] = [env.value.render()/]
	[/if]
[/for]

[comment] ----- TEST CASES ----- [/comment]
[for (tc : TestCase | aProgram.testCases)]
	[if (tc.name.oclIsUndefined())]
//Missing test case name
	[elseif (not tc.name.matches('^[a-zA-Z_][a-zA-Z0-9_ ]*$'))]
//Invalid test case name: "[tc.name/]".
	[else]
		[if (tc.statements->isEmpty())]
//Test case "[tc.name/]" is empty.
		[/if]
[comment] ----- OPTIONS ----- [/comment]
		[for (opt : Option | tc.options)]
			[if (not Sequence{'timeout', 'repeat'}->includes(opt.key))]
//Unknown option key: [opt.key/].
			[/if]
			[if (tc.options->select(o | o.key = opt.key)->size() > 1)]
//Duplicate option "[opt.key/]" in test case "[tc.name/]".
			[/if]
			[if opt.value.oclIsUndefined() or not (opt.value.oclIsKindOf(rest_tester::NumberValue))]
				[if opt.value.oclIsUndefined()]
//Missing value for option "[opt.key /]"
				[else]
//Incorrect type: [opt.value.eClass().name /] for option "[opt.key /]"
				[/if]
			[/if]
		[/for]
		[let fo : Collection(Option) = tc.options->select(o | Sequence{'timeout', 'repeat'}->includes(o.key) and not o.value.oclIsUndefined() and o.value.oclIsKindOf(NumberValue)) ]
test "[tc.name/]"[if (fo->notEmpty())] options { [renderOptions(fo)/] }[/if] {
		[/let]
[comment] ----- STATEMENTS ----- [/comment]
		[for (st : Statement | tc.statements)]
	[st.render()/]
		[/for]
}
	[/if]

[/for]
[/file]
[/template]